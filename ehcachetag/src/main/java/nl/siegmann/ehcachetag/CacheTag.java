package nl.siegmann.ehcachetag;

import java.io.IOException;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.BodyContent;
import javax.servlet.jsp.tagext.BodyTagSupport;
import javax.servlet.jsp.tagext.Tag;

import nl.siegmann.ehcachetag.cachekeyfactories.CacheKeyFactory;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CacheTag extends BodyTagSupport {

	/**
	 * 
	 */
	private static final long serialVersionUID = 333106287254149880L;

	private static final Logger LOG = LoggerFactory.getLogger(CacheTag.class);
	
	private Object key;
	private String cacheName = EHCacheTagConstants.DEFAULT_CACHE_NAME;
	private String keyFactoryName;
	private String cachedBodyContent = ContentCache.NO_CACHED_VALUE;
	private ContentCache contentCache = new ContentCache();

	/**
	 * Tries to get the body content from the cache using the cacheKey.
	 * 
	 * @param cacheKey
	 * @return The cached content, null if none found.
	 */
	private String getCachedBodyContent(String cacheName, Object cacheKey) {
		Object cachedObject = contentCache.getContent(cacheName, cacheKey);
		if (cachedObject == ContentCache.NO_CACHED_VALUE) {
			return ContentCache.NO_CACHED_VALUE;
		}
		if(! (cachedObject instanceof String)) {
			LOG.error("Cached object with key '" + cacheKey + "' in cache '" + cacheName + "' is of unexpected type " + cachedObject.getClass().getName());
			return ContentCache.NO_CACHED_VALUE;
		}
		return (String) cachedObject;
	}
	
	/**
	 * Looks for a cacheKeyFactory and has it create a cachekey, returns the cacheKey attribute otherwise.
	 * 
	 * @return a cache key created by the cacheFactory, the cacheKey attribute if no cacheKeyFactory found.
	 */
	private Object getCacheKey() {
		Object cacheKey = getCacheKeyFromFactory(this.key);
		if (cacheKey == null) {
			cacheKey = this.key;
		}
		return cacheKey;
	}
	
	/**
	 * Tries to locate a cacheKeyFactory and have it generate a cacheKey.
	 * 
	 * @param tagCacheKey
	 * @return a cache key generated by the cacheKeyFactory, null otherwise.
	 */
	private Object getCacheKeyFromFactory(Object tagCacheKey) {
		CacheKeyFactory cacheKeyFactory = EHCacheTagUtil.getCacheKeyFactory(pageContext, keyFactoryName);
		Object cacheKey = null;
		if (cacheKeyFactory != null) {
			cacheKey = cacheKeyFactory.createCacheKey(tagCacheKey, pageContext);
		}
		return cacheKey;
	}
	

	/**
	 * Writes the content of the body to the pageContext writer.
	 * The content may come from the cache.
	 * @throws IOException 
	 * 
	 */
	@Override
	public int doStartTag() throws JspException {
		Object cacheKey = getCacheKey();

		if (cacheKey == null) {
			// unable to create a cache key.
			// generate and write body content in the normal way
			return BodyTagSupport.EVAL_BODY_INCLUDE;
		}
		
		cachedBodyContent = getCachedBodyContent(cacheName, cacheKey);

		int result;

		if (cachedBodyContent == ContentCache.NO_CACHED_VALUE) {
			// we have no cached content
			result = BodyTagSupport.EVAL_BODY_BUFFERED;
		} else {
			// we have cached content, don't execute the body
			result = BodyTagSupport.SKIP_BODY;
		}
		return result;
	}

	@Override
	public int doEndTag() throws JspException {
		if (cachedBodyContent == ContentCache.NO_CACHED_VALUE) {
			// no cached bodycontent available
			// store new generated bodycontent in cache
			cachedBodyContent = updateCache(bodyContent);
		}
		
		if (cachedBodyContent == ContentCache.NO_CACHED_VALUE) {
			// write regular bodycontent to output
			// XXX doStartTag can return BodyTagSupport.EVAL_BODY_INCLUDE, do we have a bodyContent then?
			try {
				bodyContent.writeOut(pageContext.getOut());
			} catch (IOException e) {
				throw new JspException(e);
			}
		} else {
			// write cached bodycontent to output
			try {
				pageContext.getOut().write(cachedBodyContent);
			} catch (IOException e) {
				throw new JspException(e);
			}
		}
		return Tag.EVAL_PAGE;
	}
	
	private String updateCache(BodyContent bodyContent) {
		Object cacheKey = getCacheKey();
		if (cacheKey == null) {
			return ContentCache.NO_CACHED_VALUE;
		}
		String bodyContentAsString = bodyContent.getString();
		contentCache.putContent(cacheName, cacheKey, bodyContentAsString);
		return bodyContentAsString;
	}

	// test
	void setContentCache(ContentCache contentCache) {
		this.contentCache = contentCache;
	}
	
	public Object getKey() {
		return key;
	}

	public void setKey(Object key) {
		this.key = key;
	}

	public String getCache() {
		return cacheName;
	}

	public void setCache(String cacheName) {
		this.cacheName = cacheName;
	}

	public String getKeyFactory() {
		return keyFactoryName;
	}

	public void setKeyFactory(String keyFactoryName) {
		this.keyFactoryName = keyFactoryName;
	}

	// test
	void setCachedBodyContent(String cachedBodyContent) {
		this.cachedBodyContent = cachedBodyContent;
	}
}
