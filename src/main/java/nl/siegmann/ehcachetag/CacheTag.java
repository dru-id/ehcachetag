package nl.siegmann.ehcachetag;

import java.io.IOException;
import java.io.Serializable;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.tagext.BodyContent;
import javax.servlet.jsp.tagext.BodyTagSupport;

import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CacheTag extends BodyTagSupport {

	private static final long serialVersionUID = -8410456047810474588L;

	@SuppressWarnings("unused")
	private static final Logger LOG = LoggerFactory.getLogger(CacheTag.class);
	
	private Serializable cacheKey;
	private String cacheName = "DEFAULT";
	private String cacheKeyFactoryName;

	/**
	 * Tries to get the body content from the cache using the cacheKey.
	 * 
	 * @param cacheKey
	 * @return The cached content, null if none found.
	 */
	private static String getCachedBodyContent(String cacheName, Serializable cacheKey) {
		Element cacheElement = CacheManager.getInstance().getCache(cacheName).get(cacheKey);
		if (cacheElement == null) {
			return null;
		}
		String result = (String) cacheElement.getValue();
		return result;
	}
	
	/**
	 * Looks for a cacheKeyFactory and has it create a cachekey, returns the cacheKey attribute otherwise.
	 * 
	 * @return a cache key created by the cacheFactory, the cacheKey attribute if no cacheKeyFactory found.
	 */
	private Serializable getCacheKey() {
		Serializable cacheKey = getCacheKeyFromFactory(this.cacheKey);
		if (cacheKey == null) {
			cacheKey = this.cacheKey;
		}
		return cacheKey;
	}
	
	/**
	 * Tries to locate a cacheKeyFactory and have it generate a cacheKey.
	 * 
	 * @param tagCacheKey
	 * @return a cache key generated by the cacheKeyFactory, null otherwise.
	 */
	private Serializable getCacheKeyFromFactory(Serializable tagCacheKey) {
		CacheKeyFactory cacheKeyFactory = EHCacheTagUtil.getCacheKeyFactory(pageContext, cacheKeyFactoryName);
		Serializable cacheKey = null;
		if (cacheKeyFactory != null) {
			cacheKey = cacheKeyFactory.createCacheKey(tagCacheKey, pageContext);
		}
		return cacheKey;
	}

	/**
	 * Gets the content of the body.
	 * Tries to get a cached version first, if that fails it executes the normal body content.
	 * 
	 * @return the content of the body.
	 */
	private String getBodyContentAsString() {
		Serializable cacheKey = getCacheKey();
		String result = getCachedBodyContent(cacheName, cacheKey);
		if (result == null) {
			BodyContent bodyContent = getBodyContent();
			result = bodyContent.getString();
			updateCache(cacheKey, result);
		}
		return result;
	}
	
	/**
	 * Updates the cached version of the body content with the given content.
	 * 
	 * @param bodyContent
	 */
	private void updateCache(Serializable cacheKey, String bodyContent) {
		CacheManager.getInstance().getCache(cacheName).put(new Element(cacheKey, bodyContent));
	}

	/**
	 * Writes the content of the body to the pageContext writer.
	 * The content may come from the cache.
	 * 
	 */
	@Override
	public int doEndTag() throws JspException {
		String bodyContent = getBodyContentAsString();
		try {
			this.pageContext.getOut().write(bodyContent);
		} catch (IOException e) {
			throw new JspException(e);
		}
		return EVAL_PAGE;
	}
}
